<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>encouragee</artifactId>
        <groupId>org.encouragee</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>service</artifactId>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <encourage-scheduler.version>20.1.11</encourage-scheduler.version>
<!--        <camel.version>3.15.0</camel.version>-->
        <junit-jupiter.version>5.8.2</junit-jupiter.version>
<!--        <artifactory.baseurl>http://develdeploy:develdeploy@artifactory.zoomint.com/artifactory</artifactory.baseurl>-->
<!--        <encourage-common.version>20.0.15</encourage-common.version>-->
        <docker.ports.file>${project.build.directory}/docker.properties</docker.ports.file>
        <docker.registry>artifactory.zoomint.com</docker.registry>

        <solr-config-path>${config.path}/enc-conversations/solr-config-set/conversation</solr-config-path>

        <pmdEnabled>false</pmdEnabled>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka -->
<!--        <dependency>-->
<!--            <groupId>org.springframework.kafka</groupId>-->
<!--            <artifactId>spring-kafka</artifactId>-->
<!--        </dependency>-->

        <!-- Thanks for using https://jar-download.com -->

        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-conversations-model</artifactId>
            <version>20.2.20</version>
        </dependency>
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-data-model</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-scheduler-model</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-camel</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-spring</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-eclipselink</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.zoom-boot-starter</groupId>
            <artifactId>zoom-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.keycloak</groupId>
            <artifactId>keycloak-client-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>com.zoomint.keycloak</groupId>
            <artifactId>keycloak-api-provider-client</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zoomint.keycloak</groupId>
            <artifactId>keycloak-api-provider-dto</artifactId>
        </dependency>

        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <!-- we use Jetty instead -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-solr</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-restlet</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-bean-validator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-swagger-java-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>javax.ws.rs</groupId>
                    <artifactId>jsr311-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-rabbitmq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-rabbitmq-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.ben-manes.caffeine</groupId>
            <artifactId>caffeine</artifactId>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.restlet.jee</groupId>
            <artifactId>org.restlet.ext.slf4j</artifactId>
        </dependency>

        <!-- Annotations -->
        <dependency>
            <groupId>com.intellij</groupId>
            <artifactId>annotations</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-testing</artifactId>
            <version>${encourage-common.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.zoomint.encourage</groupId>
            <artifactId>encourage-wiremock</artifactId>
            <version>${encourage-common.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.unitils</groupId>
            <artifactId>unitils-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.awaitility</groupId>
            <artifactId>awaitility</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.zoomint.keycloak</groupId>
            <artifactId>keycloak-helper-lib</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.testcontainers</groupId>
                    <artifactId>database-commons</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.testcontainers</groupId>
                    <artifactId>postgresql</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.testcontainers</groupId>
                    <artifactId>jdbc</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.testcontainers</groupId>
                    <artifactId>rabbitmq</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.testcontainers</groupId>
                    <artifactId>testcontainers</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${springboot.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <version>${springboot.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-oauth2-client -->
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-oauth2-client</artifactId>-->
<!--            <version>${springboot.version}</version>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webflux</artifactId>
            <version>5.3.22</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>io.projectreactor.netty</groupId>-->
<!--            <artifactId>reactor-netty</artifactId>-->
<!--            <version>1.0.22</version>-->
<!--        </dependency>-->

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <!-- https://mvnrepository.com/artifact/io.netty/netty-codec-http -->
<!--        <dependency>-->
<!--            <groupId>io.netty</groupId>-->
<!--            <artifactId>netty-codec-http</artifactId>-->
<!--            <version>4.1.80.Final</version>-->
<!--        </dependency>-->


        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
            <version>${springboot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-json</artifactId>
            <version>${springboot.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-solr</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-solr</artifactId>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.3</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/javax.ws.rs/javax.ws.rs-api -->
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${springboot.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-dependencies</artifactId>
            <version>${springboot.version}</version>
            <type>pom</type>
            <!--            <scope>import</scope>-->
        </dependency>
        <dependency>
            <groupId>org.junit</groupId>
            <artifactId>junit-bom</artifactId>
            <version>${junit-jupiter.version}</version>
            <type>pom</type>
            <!--            <scope>import</scope>-->
        </dependency>

        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>io.rest-assured</groupId>-->
<!--            <artifactId>rest-assured-all</artifactId>-->
<!--            <version>5.1.1</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>io.rest-assured</groupId>-->
<!--            <artifactId>rest-assured</artifactId>-->
<!--            <version>5.1.1</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <version>2.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>2.0.1.Final</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-boot-dependencies</artifactId>
            <version>${camel.version}</version>
            <type>pom</type>
            <scope>import</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <configuration>
                            <!-- skip the default execution of integration tests - see profiles -->
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <!-- use original as spring-boot-maven-plugin repackages the jar into non-standard structure -->
                    <classesDirectory>${project.build.directory}/${project.build.finalName}.jar.original</classesDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.zoomint.maven.plugins</groupId>
                <artifactId>quality-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>none</phase>
                    </execution>
                </executions>
                <configuration>
                    <pmdEnabled>false</pmdEnabled>
                    <checkStyleEnabled>false</checkStyleEnabled>
                </configuration>
            </plugin >
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <phase>package</phase>
                        <configuration>
                            <classifier>original</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <!-- use only @ to avoid clashing with logback variable substitution -->
                    <useDefaultDelimiters>false</useDefaultDelimiters>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <configuration>
                            <!-- skip the default execution of integration tests - see profiles -->
                            <skip>true</skip>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <!-- use original as spring-boot-maven-plugin repackages the jar into non-standard structure -->
                    <classesDirectory>${project.build.directory}/${project.build.finalName}.jar.original</classesDirectory>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.deviceinsight.helm</groupId>
                <artifactId>helm-maven-plugin</artifactId>
                <configuration>
                    <chartName>encourage-conversations</chartName>
                    <strictLint>true</strictLint>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker-image</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <version>0.40.1</version>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
<!--                            <execution>-->
<!--                                <id>build-docker-image</id>-->
<!--                                <phase>package</phase>-->
<!--                                <goals>-->
<!--                                    <goal>build</goal>-->
<!--                                </goals>-->
<!--                            </execution>-->
<!--                            <execution>-->
<!--                                <id>push-docker-image</id>-->
<!--                                <phase>deploy</phase>-->
<!--                                <goals>-->
<!--                                    <goal>push</goal>-->
<!--                                </goals>-->
<!--                            </execution>-->
                        </executions>
                        <configuration>
                            <images>
                                <image>
                                    <name>eleveo/encourage/${project.parent.artifactId}:${chart.version}</name>
                                    <build>
                                        <dockerFileDir>service</dockerFileDir>
                                        <filter>@</filter>
                                        <assembly>
                                            <descriptorRef>artifact</descriptorRef>
                                        </assembly>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>integration-docker</id>
            <build>
                <plugins>
<!--                    <plugin>-->
<!--                        <artifactId>maven-failsafe-plugin</artifactId>-->
<!--                        <executions>-->
<!--                            <execution>-->
<!--                                <id>default</id>-->
<!--                                <configuration>-->
<!--                                    &lt;!&ndash; skip the default execution of integration tests - see profiles &ndash;&gt;-->
<!--                                    <skip>true</skip>-->
<!--                                </configuration>-->
<!--                            </execution>-->
<!--                            <execution>-->
<!--                                <id>integration-docker</id>-->
<!--                                <goals>-->
<!--                                    <goal>integration-test</goal>-->
<!--                                    <goal>verify</goal>-->
<!--                                </goals>-->
<!--                                <configuration>-->
<!--                                    <includes>-->
<!--                                        <include>**/*ITDB.java</include>-->
<!--                                        <include>**/*IT.java</include>-->
<!--                                    </includes>-->
<!--                                </configuration>-->
<!--                            </execution>-->
<!--                        </executions>-->
<!--                        <configuration>-->
<!--                            &lt;!&ndash; use original as spring-boot-maven-plugin repackages the jar into non-standard structure &ndash;&gt;-->
<!--                            <classesDirectory>${project.build.directory}/${project.build.finalName}-original.jar-->
<!--                            </classesDirectory>-->
<!--                        </configuration>-->
<!--                    </plugin>-->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>dockers-start</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>build</goal>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>dockers-stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <portPropertyFile>${docker.ports.file}</portPropertyFile>
                            <verbose>true</verbose>
                            <startParallel>true</startParallel>
                            <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                            <images>
<!--                                <image>-->
<!--                                    <alias>solr</alias>-->
<!--                                    &lt;!&ndash; todo ENC-5168: release new parent with solr 7.6.0.15 &ndash;&gt;-->
<!--                                    <name>zoomint/zoomint-solr-cloud:7.6.0.15</name>-->
<!--                                    <run>-->
<!--                                        <ports>-->
<!--                                            <port>+solr.host:solr.port:8983</port>-->
<!--                                            <port>+zk.host:zk.port:9983</port>-->
<!--                                        </ports>-->
<!--                                        <wait>-->
<!--                                            <log>Server Started @\d+ms</log>-->
<!--                                            <time>30000</time>-->
<!--                                        </wait>-->
<!--                                    </run>-->
<!--                                </image>-->
                                <image>
                                    <alias>rabbitmq</alias>
                                    <name>rabbitmq:3.8.3-management-alpine</name>
                                    <run>
                                        <network>
                                            <mode>custom</mode>
                                            <name>test-network</name>
                                            <alias>rabbit</alias>
                                        </network>
                                        <env>
                                            <RABBITMQ_DEFAULT_USER>callrec</RABBITMQ_DEFAULT_USER>
                                            <RABBITMQ_DEFAULT_PASS>callrec</RABBITMQ_DEFAULT_PASS>
                                            <RABBITMQ_CONSOLE_LOG>reuse</RABBITMQ_CONSOLE_LOG>
                                            <RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS>
                                                -rabbit log_levels
                                                [{queue,debug},{connection,debug},{channel,debug},{default,debug}]
                                            </RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS>
                                        </env>
                                        <ports>
                                            <port>+rabbit.host:rabbit.port:5672</port>
                                            <!-- the admin port is useful for debugging -->
                                            <port>+rabbit.host:rabbit.admin.port:15672</port>
                                        </ports>
                                        <wait>
                                            <log>Server startup complete</log>
                                            <time>30000</time>
                                        </wait>
                                    </run>
                                </image>
<!--                                <image>-->
<!--                                    <alias>postgres</alias>-->
<!--                                    <name>postgres:9.6.3-alpine</name>-->
<!--                                    <run>-->
<!--                                        <network>-->
<!--                                            <mode>custom</mode>-->
<!--                                            <name>test-network</name>-->
<!--                                            <alias>postgres</alias>-->
<!--                                        </network>-->
<!--                                        <ports>-->
<!--                                            <port>+postgres.host:postgres.port:5432</port>-->
<!--                                        </ports>-->
<!--                                        <wait>-->
<!--                                            <log>PostgreSQL init process complete; ready for start up.</log>-->
<!--                                            <time>30000</time>-->
<!--                                        </wait>-->
<!--                                        <env>-->
<!--                                            <POSTGRES_USER>postgres-->
<!--                                            </POSTGRES_USER>&lt;!&ndash; creates also database named test&ndash;&gt;-->
<!--                                            <POSTGRES_PASSWORD>postgres</POSTGRES_PASSWORD>-->
<!--                                        </env>-->
<!--                                    </run>-->
<!--                                </image>-->
<!--                                <image>-->
<!--                                    <name>zoomint/keycloak:${keycloak-bom.version}-->
<!--                                    </name>&lt;!&ndash;todo version to one place.. or back to orchestrator? &ndash;&gt;-->
<!--                                    <alias>keycloak</alias>-->
<!--                                    <run>-->
<!--                                        <network>-->
<!--                                            <mode>custom</mode>-->
<!--                                            <name>test-network</name>-->
<!--                                            <alias>keycloak</alias>-->
<!--                                        </network>-->
<!--                                        <ports>-->
<!--                                            <port>+keycloak.host:keycloak.port:8080</port>-->
<!--                                        </ports>-->
<!--                                        <dependsOn>-->
<!--                                            <container>postgres</container>-->
<!--                                            <container>rabbitmq</container>-->
<!--                                        </dependsOn>-->
<!--                                        <wait>-->
<!--                                            <log>Realm default registration finished</log>-->
<!--                                            <time>80000</time>-->
<!--                                        </wait>-->
<!--                                        <env>-->
<!--                                            <REALM_NAME>default</REALM_NAME>-->
<!--                                            <MASTER_CLIENT_NAME>client-management-app</MASTER_CLIENT_NAME>-->
<!--                                            <MASTER_CLIENT_SECRET>password</MASTER_CLIENT_SECRET>-->
<!--                                            <KEYCLOAK_USER>admin</KEYCLOAK_USER>-->
<!--                                            <KEYCLOAK_PASSWORD>password</KEYCLOAK_PASSWORD>-->
<!--                                            <DB_ADDR>postgres</DB_ADDR>-->
<!--                                            <DB_DATABASE>postgres</DB_DATABASE>-->
<!--                                            <DB_USER>postgres</DB_USER>-->
<!--                                            <DB_PASSWORD>postgres</DB_PASSWORD>-->
<!--                                            <DB_VENDOR>postgres</DB_VENDOR>-->
<!--                                            <DB_PORT>5432</DB_PORT>-->
<!--                                            <MESSAGE_QUEUE_HOST>rabbit</MESSAGE_QUEUE_HOST>-->
<!--                                            <MESSAGE_QUEUE_PORT>5672</MESSAGE_QUEUE_PORT>-->
<!--                                            <MESSAGE_QUEUE_USERNAME>callrec</MESSAGE_QUEUE_USERNAME>-->
<!--                                            <MESSAGE_QUEUE_PASSWORD>callrec</MESSAGE_QUEUE_PASSWORD>-->
<!--                                            <ROOT_LOGLEVEL>INFO</ROOT_LOGLEVEL>-->
<!--                                        </env>-->
<!--                                        <entrypoint>-->
<!--                                            <shell>/bin/bash -C /opt/jboss/tools/docker-entrypoint.sh-->
<!--                                                -Djavax.net.ssl.trustStore=/opt/jboss/keycloak/standalone/configuration/keystores/truststore.jks-->
<!--                                            </shell>-->
<!--                                        </entrypoint>-->
<!--                                        <privileged>true</privileged>-->
<!--                                    </run>-->
<!--                                </image>-->
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>rabbit</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.40.1</version>
                        <executions>
                            <execution>
                                <id>dockers-start</id>
                                <phase>validate</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>dockers-stop</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <verbose>true</verbose>
                            <startParallel>true</startParallel>
                            <autoCreateCustomNetworks>true</autoCreateCustomNetworks>
                            <images>
                                <image>
                                    <alias>rabbitmq</alias>
                                    <name>rabbitmq:management</name>
                                    <run>

                                        <network>
                                            <mode>custom</mode>
                                            <name>rabbit-network</name>
                                            <alias>rabbit</alias>
                                        </network>
                                        <env>
                                            <RABBITMQ_DEFAULT_USER>user</RABBITMQ_DEFAULT_USER>
                                            <RABBITMQ_DEFAULT_PASS>pass</RABBITMQ_DEFAULT_PASS>
                                            <RABBITMQ_CONSOLE_LOG>reuse</RABBITMQ_CONSOLE_LOG>
                                            <RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS>
                                                -rabbit log_levels
                                                [{queue,debug},{connection,debug},{channel,debug},{default,debug}]
                                            </RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS>
                                        </env>
                                        <ports>
                                            <port>+rabbit.host:5673:5672</port>
                                            <!-- the admin port is useful for debugging -->
                                            <port>+rabbit.host:15673:15672</port>
                                        </ports>
                                        <wait>
                                            <log>Server startup complete</log>
                                            <time>30000</time>
                                        </wait>
                                    </run>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>